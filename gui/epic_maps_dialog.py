# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EpicMapsDialog
                                 A QGIS plugin
 Making stylish maps was never so easy!
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-23
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Mateusz Ośko, Piotr Koller, Jakub Skowroński
        email                : sekcja.geoinformacji.skng@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtWidgets import QDialog, QWidget

from .style_options_widget import StyleOpstionsWidget
from .layers_page_options_widget import LayersPageOptionsWidget
from .title_author_options_widget import TitleAuthorOptionsWidget
from ..styles.styles_container import StylesContainer
from ..styles.style_settings import StyleSettings

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'epic_maps_dialog.ui'))

class EpicMapsDialog(QDialog, FORM_CLASS):
    """ Main GUI class """

    on_next_tab = pyqtSignal(object)
    on_previous_tab = pyqtSignal()
    on_generate = pyqtSignal()

    def __init__(self, parent=None):
        super(EpicMapsDialog, self).__init__(parent)
        self.setupUi(self)

        self.styleSettings = StyleSettings()
        self.currentWidget = None
        self.connectSignals()
        self.initWidgets()

    def initWidgets(self):
        # First widget on dialog start - choose style
        self.styleOpstionsWidget = StyleOpstionsWidget(self)
        self.layout().insertWidget(0, self.styleOpstionsWidget)
        self.currentWidget = self.styleOpstionsWidget
        # Second widget - choose layers and page settings
        self.layersPageOptionsWidget = LayersPageOptionsWidget(self)
        self.layout().insertWidget(0, self.layersPageOptionsWidget)
        self.layersPageOptionsWidget.hide()
        #Third widget - map title, author and ???
        self.titleAuthorOptionsWidget = TitleAuthorOptionsWidget(self)
        self.layout().insertWidget(0, self.titleAuthorOptionsWidget)
        self.titleAuthorOptionsWidget.hide()

    def connectSignals(self):
        self.on_next_tab.connect(self.nextTab)
        self.on_previous_tab.connect(self.prevTab)
        self.on_generate.connect(self.generateLayout)

    def nextTab(self, widget: QWidget):
        self.lbMessage.setText('')
        widget.hide()
        if widget == self.styleOpstionsWidget:
            self.currentWidget = self.layersPageOptionsWidget
        elif widget == self.layersPageOptionsWidget:
            self.currentWidget = self.titleAuthorOptionsWidget
        self.currentWidget.show()

    def prevTab(self):
        self.currentWidget.hide()
        if self.currentWidget == self.layersPageOptionsWidget:
            self.currentWidget = self.styleOpstionsWidget
        elif self.currentWidget == self.titleAuthorOptionsWidget:
            self.currentWidget = self.layersPageOptionsWidget
        self.currentWidget.show()

    def generateLayout(self):
        self.close()
        self.styleClass = StylesContainer(self.styleSettings)

    def setMessage(self, message: str):
        self.lbMessage.setText(message)
